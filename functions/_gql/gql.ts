/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

const documents = {
    "\n  fragment CircleSearch on circle {\n    id\n    orgId\n    role {\n      name\n    }\n    parent {\n      role {\n        name\n      }\n      parent {\n        role {\n          name\n        }\n      }\n      parent {\n        role {\n          name\n        }\n      }\n    }\n  }\n": types.CircleSearchFragmentDoc,
    "\n        query GetCircleForSearch($id: uuid!) {\n          circle_by_pk(id: $id) {\n            ...CircleSearch\n          }\n        }\n      ": types.GetCircleForSearchDocument,
    "\n        query GetCirclesForSearch {\n          circle(where: { archived: { _eq: false } }) {\n            ...CircleSearch\n          }\n        }\n      ": types.GetCirclesForSearchDocument,
    "\n          query GetRoleCirclesForSearch($id: uuid!) {\n            role(where: { id: { _eq: $id } }) {\n              circles(where: { archived: { _eq: false } }) {\n                ...CircleSearch\n              }\n            }\n          }\n        ": types.GetRoleCirclesForSearchDocument,
    "\n  fragment DecisionSearch on decision {\n    id\n    orgId\n    title\n  }\n": types.DecisionSearchFragmentDoc,
    "\n        query GetDecisionForSearch($id: uuid!) {\n          decision_by_pk(id: $id) {\n            ...DecisionSearch\n          }\n        }\n      ": types.GetDecisionForSearchDocument,
    "\n        query GetDecisionsForSearch {\n          decision(where: { archived: { _eq: false } }) {\n            ...DecisionSearch\n          }\n        }\n      ": types.GetDecisionsForSearchDocument,
    "\n  fragment MeetingSearch on meeting {\n    id\n    orgId\n    title\n    circle {\n      role {\n        name\n      }\n    }\n    steps {\n      notes\n    }\n  }\n": types.MeetingSearchFragmentDoc,
    "\n        query GetMeetingForSearch($id: uuid!) {\n          meeting_by_pk(id: $id) {\n            ...MeetingSearch\n          }\n        }\n      ": types.GetMeetingForSearchDocument,
    "\n        query GetMeetingsForSearch {\n          meeting(where: { archived: { _eq: false } }) {\n            ...MeetingSearch\n          }\n        }\n      ": types.GetMeetingsForSearchDocument,
    "\n  fragment MemberSearch on member {\n    id\n    orgId\n    name\n    picture\n  }\n": types.MemberSearchFragmentDoc,
    "\n        query GetMemberForSearch($id: uuid!) {\n          member_by_pk(id: $id) {\n            ...MemberSearch\n          }\n        }\n      ": types.GetMemberForSearchDocument,
    "\n        query GetMembersForSearch {\n          member(where: { archived: { _eq: false } }) {\n            ...MemberSearch\n          }\n        }\n      ": types.GetMembersForSearchDocument,
    "\n  fragment TaskSearch on task {\n    id\n    orgId\n    title\n  }\n": types.TaskSearchFragmentDoc,
    "\n        query GetTaskForSearch($id: uuid!) {\n          task_by_pk(id: $id) {\n            ...TaskSearch\n          }\n        }\n      ": types.GetTaskForSearchDocument,
    "\n        query GetTasksForSearch {\n          task(where: { archived: { _eq: false } }) {\n            ...TaskSearch\n          }\n        }\n      ": types.GetTasksForSearchDocument,
    "\n  fragment ThreadSearch on thread {\n    id\n    orgId\n    title\n  }\n": types.ThreadSearchFragmentDoc,
    "\n        query GetThreadForSearch($id: uuid!) {\n          thread_by_pk(id: $id) {\n            ...ThreadSearch\n          }\n        }\n      ": types.GetThreadForSearchDocument,
    "\n        query GetThreadsForSearch {\n          thread(where: { archived: { _eq: false } }) {\n            ...ThreadSearch\n          }\n        }\n      ": types.GetThreadsForSearchDocument,
    "fragment Decision on decision {\n  id\n  orgId\n  circleId\n  memberId\n  title\n  description\n  archived\n  createdAt\n}": types.DecisionFragmentDoc,
    "fragment Meeting on meeting {\n  id\n  orgId\n  circleId\n  participantsScope\n  participantsMembersIds\n  createdAt\n  startDate\n  endDate\n  ended\n  title\n  attendees\n  stepsConfig\n  currentStepId\n  archived\n  videoConf\n  recurringId\n  recurringDate\n}": types.MeetingFragmentDoc,
    "fragment MeetingStep on meeting_step {\n  id\n  meetingId\n  stepConfigId\n  notes\n  type\n  data\n}": types.MeetingStepFragmentDoc,
    "fragment Org on org {\n  id\n  name\n  archived\n  createdAt\n  defaultWorkedMinPerWeek\n  slug\n}": types.OrgFragmentDoc,
    "fragment Task on task {\n  id\n  orgId\n  circleId\n  memberId\n  title\n  description\n  archived\n  createdAt\n  dueDate\n  status\n}": types.TaskFragmentDoc,
    "fragment Thread on thread {\n  id\n  orgId\n  circleId\n  participantsScope\n  participantsMembersIds\n  initiatorMemberId\n  title\n  createdAt\n  archived\n  lastActivityId\n  lastActivityDate\n}": types.ThreadFragmentDoc,
    "fragment ThreadActivity on thread_activity {\n  id\n  threadId\n  userId\n  createdAt\n  type\n  data\n}": types.ThreadActivityFragmentDoc,
    "\n  query getMember($id: uuid!) {\n    member_by_pk(id: $id) {\n      id\n      orgId\n      userId\n      name\n      role\n      inviteDate\n    }\n  }\n": types.GetMemberDocument,
    "\n  query getOrgRole($orgId: uuid!, $userId: uuid!) {\n    org_by_pk(id: $orgId) {\n      id\n      name\n      members(where: {userId: {_eq: $userId}}) {\n        role\n      }\n    }\n  }": types.GetOrgRoleDocument,
    "\n  query getOrg($orgId: uuid!) {\n    org_by_pk(id: $orgId) {\n      id\n      members {\n        role\n      }\n    }\n  }": types.GetOrgDocument,
    "\n  mutation updateMember($id: uuid!, $values: member_set_input!) {\n    update_member_by_pk(pk_columns: { id: $id }, _set: $values) {\n      id\n    }\n  }\n": types.UpdateMemberDocument,
    "\n  query checkOrgUser($orgId: uuid!, $userId: uuid!) {\n    org_by_pk(id: $orgId) {\n      members(where: { userId: { _eq: $userId } }) {\n        id\n      }\n    }\n  }\n": types.CheckOrgUserDocument,
    "\n  query GetRecurringMeetings {\n    meeting_recurring {\n      id\n      orgId\n      circleId\n      circle {\n        role {\n          name\n        }\n      }\n      participantsScope\n      participantsMembersIds\n      templateId\n      template {\n        title\n        stepsConfig\n      }\n      rrule\n      duration\n      videoConf\n      meetings {\n        recurringDate\n      }\n    }\n  }\n": types.GetRecurringMeetingsDocument,
    "\n  mutation CreateMeeting($meeting: meeting_insert_input!) {\n    insert_meeting_one(object: $meeting) {\n      id\n    }\n  }\n": types.CreateMeetingDocument,
    "\n  query getUser($id: uuid!) {\n    user(id: $id) {\n      id\n      displayName\n    }\n  }": types.GetUserDocument,
    "\n  mutation createOrg($name: String!, $userId: uuid!, $memberName: String!) {\n    insert_org_one(object: {\n      name: $name\n      archived: false\n      defaultWorkedMinPerWeek: 2100\n      members: {\n        data: [\n          {\n            userId: $userId\n            name: $memberName\n            role: Owner\n          }\n        ]\n      }\n    }) {\n      id\n    }\n  }": types.CreateOrgDocument,
    "\n  mutation createRole($orgId: uuid!, $name: String!) {\n    insert_role_one(object: {\n      orgId: $orgId\n      name: $name\n    }) {\n      id\n    }\n  }": types.CreateRoleDocument,
    "\n  mutation createRoles($roles: [role_insert_input!]!) {\n    insert_role(objects: $roles) {\n      returning {\n        id\n      }\n    }\n  }": types.CreateRolesDocument,
    "\n  mutation createCircle($orgId: uuid!, $roleId: uuid!) {\n    insert_circle_one(object: {\n      orgId: $orgId\n      roleId: $roleId\n    }) {\n      id\n    }\n  }": types.CreateCircleDocument,
    "\n  query getMemberByUserId($orgId: uuid!, $userId: uuid!) {\n    member(where: { orgId: { _eq: $orgId }, userId: { _eq: $userId } }) {\n      id\n      name\n    }\n  }\n": types.GetMemberByUserIdDocument,
    "\n  query getOrgAndCircles($orgId: uuid!) {\n    org_by_pk(id: $orgId) {\n      name\n      slug\n      circles(where: { archived: { _eq: false } }) {\n        id\n        roleId\n        parentId\n        members(where: { archived: { _eq: false } }) {\n          id\n          memberId\n        }\n        role {\n          name\n          singleMember\n          link\n        }\n      }\n      meetings(\n        where: { archived: { _eq: false } }\n        order_by: { startDate: asc }\n      ) {\n        id\n        orgId\n        circleId\n        circle {\n          role {\n            name\n          }\n        }\n        participantsScope\n        participantsMembersIds\n        attendees\n        startDate\n        endDate\n        title\n        recurringId\n        recurringDate\n      }\n      meetings_recurring {\n        id\n        orgId\n        circleId\n        circle {\n          role {\n            name\n          }\n        }\n        participantsScope\n        participantsMembersIds\n        template {\n          title\n        }\n        rrule\n        duration\n      }\n    }\n  }\n": types.GetOrgAndCirclesDocument,
    "\n  query GetOldIds {\n    old_id {\n      id\n      oldId\n      type\n    }\n  }\n": types.GetOldIdsDocument,
    "\n  query getRecipients($memberIds: [uuid!]!) {\n    member(where: { id: { _in: $memberIds } }) {\n      user {\n        id\n        email\n      }\n    }\n  }\n": types.GetRecipientsDocument,
    "\n  mutation startMembersMeeting($membersIds: [uuid!]!, $meetingId: uuid!) {\n    update_member(\n      where: { id: { _in: $membersIds } }\n      _set: { meetingId: $meetingId }\n    ) {\n      returning {\n        id\n      }\n    }\n  }": types.StartMembersMeetingDocument,
    "\n  mutation stopMembersMeeting($meetingId: uuid!) {\n    update_member(\n      where: { meetingId: { _eq: $meetingId } }\n      _set: { meetingId: null }\n    ) {\n      returning {\n        id\n      }\n    }\n  }": types.StopMembersMeetingDocument,
    "\n  mutation updateOrgSlug($id: uuid!, $slug: String!) {\n    update_org_by_pk(pk_columns: { id: $id }, _set: { slug: $slug }) {\n      id\n    }\n  }": types.UpdateOrgSlugDocument,
};

export function gql(source: "\n  fragment CircleSearch on circle {\n    id\n    orgId\n    role {\n      name\n    }\n    parent {\n      role {\n        name\n      }\n      parent {\n        role {\n          name\n        }\n      }\n      parent {\n        role {\n          name\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  fragment CircleSearch on circle {\n    id\n    orgId\n    role {\n      name\n    }\n    parent {\n      role {\n        name\n      }\n      parent {\n        role {\n          name\n        }\n      }\n      parent {\n        role {\n          name\n        }\n      }\n    }\n  }\n"];
export function gql(source: "\n        query GetCircleForSearch($id: uuid!) {\n          circle_by_pk(id: $id) {\n            ...CircleSearch\n          }\n        }\n      "): (typeof documents)["\n        query GetCircleForSearch($id: uuid!) {\n          circle_by_pk(id: $id) {\n            ...CircleSearch\n          }\n        }\n      "];
export function gql(source: "\n        query GetCirclesForSearch {\n          circle(where: { archived: { _eq: false } }) {\n            ...CircleSearch\n          }\n        }\n      "): (typeof documents)["\n        query GetCirclesForSearch {\n          circle(where: { archived: { _eq: false } }) {\n            ...CircleSearch\n          }\n        }\n      "];
export function gql(source: "\n          query GetRoleCirclesForSearch($id: uuid!) {\n            role(where: { id: { _eq: $id } }) {\n              circles(where: { archived: { _eq: false } }) {\n                ...CircleSearch\n              }\n            }\n          }\n        "): (typeof documents)["\n          query GetRoleCirclesForSearch($id: uuid!) {\n            role(where: { id: { _eq: $id } }) {\n              circles(where: { archived: { _eq: false } }) {\n                ...CircleSearch\n              }\n            }\n          }\n        "];
export function gql(source: "\n  fragment DecisionSearch on decision {\n    id\n    orgId\n    title\n  }\n"): (typeof documents)["\n  fragment DecisionSearch on decision {\n    id\n    orgId\n    title\n  }\n"];
export function gql(source: "\n        query GetDecisionForSearch($id: uuid!) {\n          decision_by_pk(id: $id) {\n            ...DecisionSearch\n          }\n        }\n      "): (typeof documents)["\n        query GetDecisionForSearch($id: uuid!) {\n          decision_by_pk(id: $id) {\n            ...DecisionSearch\n          }\n        }\n      "];
export function gql(source: "\n        query GetDecisionsForSearch {\n          decision(where: { archived: { _eq: false } }) {\n            ...DecisionSearch\n          }\n        }\n      "): (typeof documents)["\n        query GetDecisionsForSearch {\n          decision(where: { archived: { _eq: false } }) {\n            ...DecisionSearch\n          }\n        }\n      "];
export function gql(source: "\n  fragment MeetingSearch on meeting {\n    id\n    orgId\n    title\n    circle {\n      role {\n        name\n      }\n    }\n    steps {\n      notes\n    }\n  }\n"): (typeof documents)["\n  fragment MeetingSearch on meeting {\n    id\n    orgId\n    title\n    circle {\n      role {\n        name\n      }\n    }\n    steps {\n      notes\n    }\n  }\n"];
export function gql(source: "\n        query GetMeetingForSearch($id: uuid!) {\n          meeting_by_pk(id: $id) {\n            ...MeetingSearch\n          }\n        }\n      "): (typeof documents)["\n        query GetMeetingForSearch($id: uuid!) {\n          meeting_by_pk(id: $id) {\n            ...MeetingSearch\n          }\n        }\n      "];
export function gql(source: "\n        query GetMeetingsForSearch {\n          meeting(where: { archived: { _eq: false } }) {\n            ...MeetingSearch\n          }\n        }\n      "): (typeof documents)["\n        query GetMeetingsForSearch {\n          meeting(where: { archived: { _eq: false } }) {\n            ...MeetingSearch\n          }\n        }\n      "];
export function gql(source: "\n  fragment MemberSearch on member {\n    id\n    orgId\n    name\n    picture\n  }\n"): (typeof documents)["\n  fragment MemberSearch on member {\n    id\n    orgId\n    name\n    picture\n  }\n"];
export function gql(source: "\n        query GetMemberForSearch($id: uuid!) {\n          member_by_pk(id: $id) {\n            ...MemberSearch\n          }\n        }\n      "): (typeof documents)["\n        query GetMemberForSearch($id: uuid!) {\n          member_by_pk(id: $id) {\n            ...MemberSearch\n          }\n        }\n      "];
export function gql(source: "\n        query GetMembersForSearch {\n          member(where: { archived: { _eq: false } }) {\n            ...MemberSearch\n          }\n        }\n      "): (typeof documents)["\n        query GetMembersForSearch {\n          member(where: { archived: { _eq: false } }) {\n            ...MemberSearch\n          }\n        }\n      "];
export function gql(source: "\n  fragment TaskSearch on task {\n    id\n    orgId\n    title\n  }\n"): (typeof documents)["\n  fragment TaskSearch on task {\n    id\n    orgId\n    title\n  }\n"];
export function gql(source: "\n        query GetTaskForSearch($id: uuid!) {\n          task_by_pk(id: $id) {\n            ...TaskSearch\n          }\n        }\n      "): (typeof documents)["\n        query GetTaskForSearch($id: uuid!) {\n          task_by_pk(id: $id) {\n            ...TaskSearch\n          }\n        }\n      "];
export function gql(source: "\n        query GetTasksForSearch {\n          task(where: { archived: { _eq: false } }) {\n            ...TaskSearch\n          }\n        }\n      "): (typeof documents)["\n        query GetTasksForSearch {\n          task(where: { archived: { _eq: false } }) {\n            ...TaskSearch\n          }\n        }\n      "];
export function gql(source: "\n  fragment ThreadSearch on thread {\n    id\n    orgId\n    title\n  }\n"): (typeof documents)["\n  fragment ThreadSearch on thread {\n    id\n    orgId\n    title\n  }\n"];
export function gql(source: "\n        query GetThreadForSearch($id: uuid!) {\n          thread_by_pk(id: $id) {\n            ...ThreadSearch\n          }\n        }\n      "): (typeof documents)["\n        query GetThreadForSearch($id: uuid!) {\n          thread_by_pk(id: $id) {\n            ...ThreadSearch\n          }\n        }\n      "];
export function gql(source: "\n        query GetThreadsForSearch {\n          thread(where: { archived: { _eq: false } }) {\n            ...ThreadSearch\n          }\n        }\n      "): (typeof documents)["\n        query GetThreadsForSearch {\n          thread(where: { archived: { _eq: false } }) {\n            ...ThreadSearch\n          }\n        }\n      "];
export function gql(source: "fragment Decision on decision {\n  id\n  orgId\n  circleId\n  memberId\n  title\n  description\n  archived\n  createdAt\n}"): (typeof documents)["fragment Decision on decision {\n  id\n  orgId\n  circleId\n  memberId\n  title\n  description\n  archived\n  createdAt\n}"];
export function gql(source: "fragment Meeting on meeting {\n  id\n  orgId\n  circleId\n  participantsScope\n  participantsMembersIds\n  createdAt\n  startDate\n  endDate\n  ended\n  title\n  attendees\n  stepsConfig\n  currentStepId\n  archived\n  videoConf\n  recurringId\n  recurringDate\n}"): (typeof documents)["fragment Meeting on meeting {\n  id\n  orgId\n  circleId\n  participantsScope\n  participantsMembersIds\n  createdAt\n  startDate\n  endDate\n  ended\n  title\n  attendees\n  stepsConfig\n  currentStepId\n  archived\n  videoConf\n  recurringId\n  recurringDate\n}"];
export function gql(source: "fragment MeetingStep on meeting_step {\n  id\n  meetingId\n  stepConfigId\n  notes\n  type\n  data\n}"): (typeof documents)["fragment MeetingStep on meeting_step {\n  id\n  meetingId\n  stepConfigId\n  notes\n  type\n  data\n}"];
export function gql(source: "fragment Org on org {\n  id\n  name\n  archived\n  createdAt\n  defaultWorkedMinPerWeek\n  slug\n}"): (typeof documents)["fragment Org on org {\n  id\n  name\n  archived\n  createdAt\n  defaultWorkedMinPerWeek\n  slug\n}"];
export function gql(source: "fragment Task on task {\n  id\n  orgId\n  circleId\n  memberId\n  title\n  description\n  archived\n  createdAt\n  dueDate\n  status\n}"): (typeof documents)["fragment Task on task {\n  id\n  orgId\n  circleId\n  memberId\n  title\n  description\n  archived\n  createdAt\n  dueDate\n  status\n}"];
export function gql(source: "fragment Thread on thread {\n  id\n  orgId\n  circleId\n  participantsScope\n  participantsMembersIds\n  initiatorMemberId\n  title\n  createdAt\n  archived\n  lastActivityId\n  lastActivityDate\n}"): (typeof documents)["fragment Thread on thread {\n  id\n  orgId\n  circleId\n  participantsScope\n  participantsMembersIds\n  initiatorMemberId\n  title\n  createdAt\n  archived\n  lastActivityId\n  lastActivityDate\n}"];
export function gql(source: "fragment ThreadActivity on thread_activity {\n  id\n  threadId\n  userId\n  createdAt\n  type\n  data\n}"): (typeof documents)["fragment ThreadActivity on thread_activity {\n  id\n  threadId\n  userId\n  createdAt\n  type\n  data\n}"];
export function gql(source: "\n  query getMember($id: uuid!) {\n    member_by_pk(id: $id) {\n      id\n      orgId\n      userId\n      name\n      role\n      inviteDate\n    }\n  }\n"): (typeof documents)["\n  query getMember($id: uuid!) {\n    member_by_pk(id: $id) {\n      id\n      orgId\n      userId\n      name\n      role\n      inviteDate\n    }\n  }\n"];
export function gql(source: "\n  query getOrgRole($orgId: uuid!, $userId: uuid!) {\n    org_by_pk(id: $orgId) {\n      id\n      name\n      members(where: {userId: {_eq: $userId}}) {\n        role\n      }\n    }\n  }"): (typeof documents)["\n  query getOrgRole($orgId: uuid!, $userId: uuid!) {\n    org_by_pk(id: $orgId) {\n      id\n      name\n      members(where: {userId: {_eq: $userId}}) {\n        role\n      }\n    }\n  }"];
export function gql(source: "\n  query getOrg($orgId: uuid!) {\n    org_by_pk(id: $orgId) {\n      id\n      members {\n        role\n      }\n    }\n  }"): (typeof documents)["\n  query getOrg($orgId: uuid!) {\n    org_by_pk(id: $orgId) {\n      id\n      members {\n        role\n      }\n    }\n  }"];
export function gql(source: "\n  mutation updateMember($id: uuid!, $values: member_set_input!) {\n    update_member_by_pk(pk_columns: { id: $id }, _set: $values) {\n      id\n    }\n  }\n"): (typeof documents)["\n  mutation updateMember($id: uuid!, $values: member_set_input!) {\n    update_member_by_pk(pk_columns: { id: $id }, _set: $values) {\n      id\n    }\n  }\n"];
export function gql(source: "\n  query checkOrgUser($orgId: uuid!, $userId: uuid!) {\n    org_by_pk(id: $orgId) {\n      members(where: { userId: { _eq: $userId } }) {\n        id\n      }\n    }\n  }\n"): (typeof documents)["\n  query checkOrgUser($orgId: uuid!, $userId: uuid!) {\n    org_by_pk(id: $orgId) {\n      members(where: { userId: { _eq: $userId } }) {\n        id\n      }\n    }\n  }\n"];
export function gql(source: "\n  query GetRecurringMeetings {\n    meeting_recurring {\n      id\n      orgId\n      circleId\n      circle {\n        role {\n          name\n        }\n      }\n      participantsScope\n      participantsMembersIds\n      templateId\n      template {\n        title\n        stepsConfig\n      }\n      rrule\n      duration\n      videoConf\n      meetings {\n        recurringDate\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetRecurringMeetings {\n    meeting_recurring {\n      id\n      orgId\n      circleId\n      circle {\n        role {\n          name\n        }\n      }\n      participantsScope\n      participantsMembersIds\n      templateId\n      template {\n        title\n        stepsConfig\n      }\n      rrule\n      duration\n      videoConf\n      meetings {\n        recurringDate\n      }\n    }\n  }\n"];
export function gql(source: "\n  mutation CreateMeeting($meeting: meeting_insert_input!) {\n    insert_meeting_one(object: $meeting) {\n      id\n    }\n  }\n"): (typeof documents)["\n  mutation CreateMeeting($meeting: meeting_insert_input!) {\n    insert_meeting_one(object: $meeting) {\n      id\n    }\n  }\n"];
export function gql(source: "\n  query getUser($id: uuid!) {\n    user(id: $id) {\n      id\n      displayName\n    }\n  }"): (typeof documents)["\n  query getUser($id: uuid!) {\n    user(id: $id) {\n      id\n      displayName\n    }\n  }"];
export function gql(source: "\n  mutation createOrg($name: String!, $userId: uuid!, $memberName: String!) {\n    insert_org_one(object: {\n      name: $name\n      archived: false\n      defaultWorkedMinPerWeek: 2100\n      members: {\n        data: [\n          {\n            userId: $userId\n            name: $memberName\n            role: Owner\n          }\n        ]\n      }\n    }) {\n      id\n    }\n  }"): (typeof documents)["\n  mutation createOrg($name: String!, $userId: uuid!, $memberName: String!) {\n    insert_org_one(object: {\n      name: $name\n      archived: false\n      defaultWorkedMinPerWeek: 2100\n      members: {\n        data: [\n          {\n            userId: $userId\n            name: $memberName\n            role: Owner\n          }\n        ]\n      }\n    }) {\n      id\n    }\n  }"];
export function gql(source: "\n  mutation createRole($orgId: uuid!, $name: String!) {\n    insert_role_one(object: {\n      orgId: $orgId\n      name: $name\n    }) {\n      id\n    }\n  }"): (typeof documents)["\n  mutation createRole($orgId: uuid!, $name: String!) {\n    insert_role_one(object: {\n      orgId: $orgId\n      name: $name\n    }) {\n      id\n    }\n  }"];
export function gql(source: "\n  mutation createRoles($roles: [role_insert_input!]!) {\n    insert_role(objects: $roles) {\n      returning {\n        id\n      }\n    }\n  }"): (typeof documents)["\n  mutation createRoles($roles: [role_insert_input!]!) {\n    insert_role(objects: $roles) {\n      returning {\n        id\n      }\n    }\n  }"];
export function gql(source: "\n  mutation createCircle($orgId: uuid!, $roleId: uuid!) {\n    insert_circle_one(object: {\n      orgId: $orgId\n      roleId: $roleId\n    }) {\n      id\n    }\n  }"): (typeof documents)["\n  mutation createCircle($orgId: uuid!, $roleId: uuid!) {\n    insert_circle_one(object: {\n      orgId: $orgId\n      roleId: $roleId\n    }) {\n      id\n    }\n  }"];
export function gql(source: "\n  query getMemberByUserId($orgId: uuid!, $userId: uuid!) {\n    member(where: { orgId: { _eq: $orgId }, userId: { _eq: $userId } }) {\n      id\n      name\n    }\n  }\n"): (typeof documents)["\n  query getMemberByUserId($orgId: uuid!, $userId: uuid!) {\n    member(where: { orgId: { _eq: $orgId }, userId: { _eq: $userId } }) {\n      id\n      name\n    }\n  }\n"];
export function gql(source: "\n  query getOrgAndCircles($orgId: uuid!) {\n    org_by_pk(id: $orgId) {\n      name\n      slug\n      circles(where: { archived: { _eq: false } }) {\n        id\n        roleId\n        parentId\n        members(where: { archived: { _eq: false } }) {\n          id\n          memberId\n        }\n        role {\n          name\n          singleMember\n          link\n        }\n      }\n      meetings(\n        where: { archived: { _eq: false } }\n        order_by: { startDate: asc }\n      ) {\n        id\n        orgId\n        circleId\n        circle {\n          role {\n            name\n          }\n        }\n        participantsScope\n        participantsMembersIds\n        attendees\n        startDate\n        endDate\n        title\n        recurringId\n        recurringDate\n      }\n      meetings_recurring {\n        id\n        orgId\n        circleId\n        circle {\n          role {\n            name\n          }\n        }\n        participantsScope\n        participantsMembersIds\n        template {\n          title\n        }\n        rrule\n        duration\n      }\n    }\n  }\n"): (typeof documents)["\n  query getOrgAndCircles($orgId: uuid!) {\n    org_by_pk(id: $orgId) {\n      name\n      slug\n      circles(where: { archived: { _eq: false } }) {\n        id\n        roleId\n        parentId\n        members(where: { archived: { _eq: false } }) {\n          id\n          memberId\n        }\n        role {\n          name\n          singleMember\n          link\n        }\n      }\n      meetings(\n        where: { archived: { _eq: false } }\n        order_by: { startDate: asc }\n      ) {\n        id\n        orgId\n        circleId\n        circle {\n          role {\n            name\n          }\n        }\n        participantsScope\n        participantsMembersIds\n        attendees\n        startDate\n        endDate\n        title\n        recurringId\n        recurringDate\n      }\n      meetings_recurring {\n        id\n        orgId\n        circleId\n        circle {\n          role {\n            name\n          }\n        }\n        participantsScope\n        participantsMembersIds\n        template {\n          title\n        }\n        rrule\n        duration\n      }\n    }\n  }\n"];
export function gql(source: "\n  query GetOldIds {\n    old_id {\n      id\n      oldId\n      type\n    }\n  }\n"): (typeof documents)["\n  query GetOldIds {\n    old_id {\n      id\n      oldId\n      type\n    }\n  }\n"];
export function gql(source: "\n  query getRecipients($memberIds: [uuid!]!) {\n    member(where: { id: { _in: $memberIds } }) {\n      user {\n        id\n        email\n      }\n    }\n  }\n"): (typeof documents)["\n  query getRecipients($memberIds: [uuid!]!) {\n    member(where: { id: { _in: $memberIds } }) {\n      user {\n        id\n        email\n      }\n    }\n  }\n"];
export function gql(source: "\n  mutation startMembersMeeting($membersIds: [uuid!]!, $meetingId: uuid!) {\n    update_member(\n      where: { id: { _in: $membersIds } }\n      _set: { meetingId: $meetingId }\n    ) {\n      returning {\n        id\n      }\n    }\n  }"): (typeof documents)["\n  mutation startMembersMeeting($membersIds: [uuid!]!, $meetingId: uuid!) {\n    update_member(\n      where: { id: { _in: $membersIds } }\n      _set: { meetingId: $meetingId }\n    ) {\n      returning {\n        id\n      }\n    }\n  }"];
export function gql(source: "\n  mutation stopMembersMeeting($meetingId: uuid!) {\n    update_member(\n      where: { meetingId: { _eq: $meetingId } }\n      _set: { meetingId: null }\n    ) {\n      returning {\n        id\n      }\n    }\n  }"): (typeof documents)["\n  mutation stopMembersMeeting($meetingId: uuid!) {\n    update_member(\n      where: { meetingId: { _eq: $meetingId } }\n      _set: { meetingId: null }\n    ) {\n      returning {\n        id\n      }\n    }\n  }"];
export function gql(source: "\n  mutation updateOrgSlug($id: uuid!, $slug: String!) {\n    update_org_by_pk(pk_columns: { id: $id }, _set: { slug: $slug }) {\n      id\n    }\n  }"): (typeof documents)["\n  mutation updateOrgSlug($id: uuid!, $slug: String!) {\n    update_org_by_pk(pk_columns: { id: $id }, _set: { slug: $slug }) {\n      id\n    }\n  }"];

export function gql(source: string): unknown;
export function gql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;