diff --git a/node_modules/@lexical/markdown/LexicalMarkdown.dev.js b/node_modules/@lexical/markdown/LexicalMarkdown.dev.js
index b86c397..22ce4e4 100644
--- a/node_modules/@lexical/markdown/LexicalMarkdown.dev.js
+++ b/node_modules/@lexical/markdown/LexicalMarkdown.dev.js
@@ -238,11 +238,14 @@ const CODE_BLOCK_REG_EXP = /^```(\w{1,10})?\s?$/;
 function createMarkdownImport(transformers) {
   const byType = transformersByType(transformers);
   const textFormatTransformersIndex = createTextFormatTransformersIndex(byType.textFormat);
-  return markdownString => {
+  return (markdownString, root) => {
     const lines = markdownString.split('\n');
     const linesLength = lines.length;
-    const root = lexical.$getRoot();
-    root.clear();
+
+    if (!root) {
+      root = lexical.$getRoot();
+      root.clear();
+    }
 
     for (let i = 0; i < linesLength; i++) {
       const lineText = lines[i]; // Codeblocks are processed first as anything inside such block
@@ -1121,3 +1124,4 @@ exports.TEXT_MATCH_TRANSFORMERS = TEXT_MATCH_TRANSFORMERS;
 exports.TRANSFORMERS = TRANSFORMERS;
 exports.UNORDERED_LIST = UNORDERED_LIST;
 exports.registerMarkdownShortcuts = registerMarkdownShortcuts;
+exports.createMarkdownImport = createMarkdownImport;
diff --git a/node_modules/@lexical/markdown/LexicalMarkdown.js b/node_modules/@lexical/markdown/LexicalMarkdown.js
index 8002537..5747dc5 100644
--- a/node_modules/@lexical/markdown/LexicalMarkdown.js
+++ b/node_modules/@lexical/markdown/LexicalMarkdown.js
@@ -5,5 +5,5 @@
  * LICENSE file in the root directory of this source tree.
  */
 'use strict'
-const LexicalMarkdown = process.env.NODE_ENV === 'development' ? require('./LexicalMarkdown.dev.js') : require('./LexicalMarkdown.prod.js')
+const LexicalMarkdown = require('./LexicalMarkdown.dev.js')
 module.exports = LexicalMarkdown;
\ No newline at end of file
diff --git a/node_modules/@lexical/markdown/MarkdownImport.d.ts b/node_modules/@lexical/markdown/MarkdownImport.d.ts
index ad47095..2138a03 100644
--- a/node_modules/@lexical/markdown/MarkdownImport.d.ts
+++ b/node_modules/@lexical/markdown/MarkdownImport.d.ts
@@ -6,4 +6,5 @@
  *
  */
 import type { Transformer } from '@lexical/markdown';
-export declare function createMarkdownImport(transformers: Array<Transformer>): (markdownString: string) => void;
+import { ElementNode } from 'lexical';
+export declare function createMarkdownImport(transformers: Array<Transformer>, root?: ElementNode): (markdownString: string) => void;
diff --git a/node_modules/@lexical/markdown/index.d.ts b/node_modules/@lexical/markdown/index.d.ts
index 5e8d634..f5486c2 100644
--- a/node_modules/@lexical/markdown/index.d.ts
+++ b/node_modules/@lexical/markdown/index.d.ts
@@ -6,8 +6,9 @@
  * LICENSE file in the root directory of this source tree.
  *
  */
-import type { ElementTransformer, TextFormatTransformer, TextMatchTransformer, Transformer } from './MarkdownTransformers';
+import { createMarkdownImport } from './LexicalMarkdown';
 import { registerMarkdownShortcuts } from './MarkdownShortcuts';
+import type { ElementTransformer, TextFormatTransformer, TextMatchTransformer, Transformer } from './MarkdownTransformers';
 import { BOLD_ITALIC_STAR, BOLD_ITALIC_UNDERSCORE, BOLD_STAR, BOLD_UNDERSCORE, CHECK_LIST, CODE, HEADING, INLINE_CODE, ITALIC_STAR, ITALIC_UNDERSCORE, LINK, ORDERED_LIST, QUOTE, STRIKETHROUGH, UNORDERED_LIST } from './MarkdownTransformers';
 declare const ELEMENT_TRANSFORMERS: Array<ElementTransformer>;
 declare const TEXT_FORMAT_TRANSFORMERS: Array<TextFormatTransformer>;
@@ -15,4 +16,5 @@ declare const TEXT_MATCH_TRANSFORMERS: Array<TextMatchTransformer>;
 declare const TRANSFORMERS: Array<Transformer>;
 declare function $convertFromMarkdownString(markdown: string, transformers?: Array<Transformer>): void;
 declare function $convertToMarkdownString(transformers?: Array<Transformer>): string;
-export { $convertFromMarkdownString, $convertToMarkdownString, BOLD_ITALIC_STAR, BOLD_ITALIC_UNDERSCORE, BOLD_STAR, BOLD_UNDERSCORE, CHECK_LIST, CODE, ELEMENT_TRANSFORMERS, ElementTransformer, HEADING, INLINE_CODE, ITALIC_STAR, ITALIC_UNDERSCORE, LINK, ORDERED_LIST, QUOTE, registerMarkdownShortcuts, STRIKETHROUGH, TEXT_FORMAT_TRANSFORMERS, TEXT_MATCH_TRANSFORMERS, TextFormatTransformer, TextMatchTransformer, Transformer, TRANSFORMERS, UNORDERED_LIST, };
+export { $convertFromMarkdownString, $convertToMarkdownString, BOLD_ITALIC_STAR, BOLD_ITALIC_UNDERSCORE, BOLD_STAR, BOLD_UNDERSCORE, CHECK_LIST, CODE, ELEMENT_TRANSFORMERS, ElementTransformer, HEADING, INLINE_CODE, ITALIC_STAR, ITALIC_UNDERSCORE, LINK, ORDERED_LIST, QUOTE, registerMarkdownShortcuts, STRIKETHROUGH, TEXT_FORMAT_TRANSFORMERS, TEXT_MATCH_TRANSFORMERS, TextFormatTransformer, TextMatchTransformer, Transformer, TRANSFORMERS, UNORDERED_LIST, createMarkdownImport };
+
